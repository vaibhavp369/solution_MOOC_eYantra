
Experiment-1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  000006c2  00000756  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800202  00800202  00000758  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000758  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000788  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  000007c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001910  00000000  00000000  000008c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eee  00000000  00000000  000021d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a72  00000000  00000000  000030c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001fc  00000000  00000000  00003b38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000853  00000000  00000000  00003d34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009ab  00000000  00000000  00004587  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00004f32  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 ec       	ldi	r30, 0xC2	; 194
  fc:	f6 e0       	ldi	r31, 0x06	; 6
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 30       	cpi	r26, 0x02	; 2
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a2 e0       	ldi	r26, 0x02	; 2
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ae 30       	cpi	r26, 0x0E	; 14
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	3e d2       	rcall	.+1148   	; 0x59c <main>
 120:	ce c2       	rjmp	.+1436   	; 0x6be <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <lcd_port_config>:
 * Logic: This function clears LCD by giving specific command as input to lcd_wr_command() function
 * Example Call: lcd_clear();
 */
void lcd_clear (void)
{
	lcd_wr_command(0x01);
 124:	87 b1       	in	r24, 0x07	; 7
 126:	87 60       	ori	r24, 0x07	; 7
 128:	87 b9       	out	0x07, r24	; 7
 12a:	87 b1       	in	r24, 0x07	; 7
 12c:	80 6f       	ori	r24, 0xF0	; 240
 12e:	87 b9       	out	0x07, r24	; 7
 130:	88 b1       	in	r24, 0x08	; 8
 132:	88 7f       	andi	r24, 0xF8	; 248
 134:	88 b9       	out	0x08, r24	; 8
 136:	88 b1       	in	r24, 0x08	; 8
 138:	8f 70       	andi	r24, 0x0F	; 15
 13a:	88 b9       	out	0x08, r24	; 8
 13c:	08 95       	ret

0000013e <lcd_set_4bit>:
 13e:	86 e6       	ldi	r24, 0x66	; 102
 140:	9e e0       	ldi	r25, 0x0E	; 14
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <lcd_set_4bit+0x4>
 146:	00 00       	nop
 148:	40 98       	cbi	0x08, 0	; 8
 14a:	41 98       	cbi	0x08, 1	; 8
 14c:	80 e3       	ldi	r24, 0x30	; 48
 14e:	88 b9       	out	0x08, r24	; 8
 150:	42 9a       	sbi	0x08, 2	; 8
 152:	ef ef       	ldi	r30, 0xFF	; 255
 154:	f7 e4       	ldi	r31, 0x47	; 71
 156:	31 97       	sbiw	r30, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <lcd_set_4bit+0x18>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <lcd_set_4bit+0x1e>
 15c:	00 00       	nop
 15e:	42 98       	cbi	0x08, 2	; 8
 160:	e6 e6       	ldi	r30, 0x66	; 102
 162:	fe e0       	ldi	r31, 0x0E	; 14
 164:	31 97       	sbiw	r30, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <lcd_set_4bit+0x26>
 168:	00 00       	nop
 16a:	40 98       	cbi	0x08, 0	; 8
 16c:	41 98       	cbi	0x08, 1	; 8
 16e:	88 b9       	out	0x08, r24	; 8
 170:	42 9a       	sbi	0x08, 2	; 8
 172:	ef ef       	ldi	r30, 0xFF	; 255
 174:	f7 e4       	ldi	r31, 0x47	; 71
 176:	31 97       	sbiw	r30, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <lcd_set_4bit+0x38>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <lcd_set_4bit+0x3e>
 17c:	00 00       	nop
 17e:	42 98       	cbi	0x08, 2	; 8
 180:	e6 e6       	ldi	r30, 0x66	; 102
 182:	fe e0       	ldi	r31, 0x0E	; 14
 184:	31 97       	sbiw	r30, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <lcd_set_4bit+0x46>
 188:	00 00       	nop
 18a:	40 98       	cbi	0x08, 0	; 8
 18c:	41 98       	cbi	0x08, 1	; 8
 18e:	88 b9       	out	0x08, r24	; 8
 190:	42 9a       	sbi	0x08, 2	; 8
 192:	8f ef       	ldi	r24, 0xFF	; 255
 194:	97 e4       	ldi	r25, 0x47	; 71
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <lcd_set_4bit+0x58>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <lcd_set_4bit+0x5e>
 19c:	00 00       	nop
 19e:	42 98       	cbi	0x08, 2	; 8
 1a0:	e6 e6       	ldi	r30, 0x66	; 102
 1a2:	fe e0       	ldi	r31, 0x0E	; 14
 1a4:	31 97       	sbiw	r30, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <lcd_set_4bit+0x66>
 1a8:	00 00       	nop
 1aa:	40 98       	cbi	0x08, 0	; 8
 1ac:	41 98       	cbi	0x08, 1	; 8
 1ae:	80 e2       	ldi	r24, 0x20	; 32
 1b0:	88 b9       	out	0x08, r24	; 8
 1b2:	42 9a       	sbi	0x08, 2	; 8
 1b4:	8f ef       	ldi	r24, 0xFF	; 255
 1b6:	97 e4       	ldi	r25, 0x47	; 71
 1b8:	01 97       	sbiw	r24, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <lcd_set_4bit+0x7a>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <lcd_set_4bit+0x80>
 1be:	00 00       	nop
 1c0:	42 98       	cbi	0x08, 2	; 8
 1c2:	08 95       	ret

000001c4 <lcd_wr_command>:
 1c4:	98 b1       	in	r25, 0x08	; 8
 1c6:	9f 70       	andi	r25, 0x0F	; 15
 1c8:	98 b9       	out	0x08, r25	; 8
 1ca:	98 b1       	in	r25, 0x08	; 8
 1cc:	28 2f       	mov	r18, r24
 1ce:	20 7f       	andi	r18, 0xF0	; 240
 1d0:	92 2b       	or	r25, r18
 1d2:	98 b9       	out	0x08, r25	; 8
 1d4:	40 98       	cbi	0x08, 0	; 8
 1d6:	41 98       	cbi	0x08, 1	; 8
 1d8:	42 9a       	sbi	0x08, 2	; 8
 1da:	ef ef       	ldi	r30, 0xFF	; 255
 1dc:	f7 e4       	ldi	r31, 0x47	; 71
 1de:	31 97       	sbiw	r30, 0x01	; 1
 1e0:	f1 f7       	brne	.-4      	; 0x1de <lcd_wr_command+0x1a>
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <lcd_wr_command+0x20>
 1e4:	00 00       	nop
 1e6:	42 98       	cbi	0x08, 2	; 8
 1e8:	98 b1       	in	r25, 0x08	; 8
 1ea:	9f 70       	andi	r25, 0x0F	; 15
 1ec:	98 b9       	out	0x08, r25	; 8
 1ee:	98 b1       	in	r25, 0x08	; 8
 1f0:	82 95       	swap	r24
 1f2:	80 7f       	andi	r24, 0xF0	; 240
 1f4:	89 2b       	or	r24, r25
 1f6:	88 b9       	out	0x08, r24	; 8
 1f8:	40 98       	cbi	0x08, 0	; 8
 1fa:	41 98       	cbi	0x08, 1	; 8
 1fc:	42 9a       	sbi	0x08, 2	; 8
 1fe:	8f ef       	ldi	r24, 0xFF	; 255
 200:	97 e4       	ldi	r25, 0x47	; 71
 202:	01 97       	sbiw	r24, 0x01	; 1
 204:	f1 f7       	brne	.-4      	; 0x202 <lcd_wr_command+0x3e>
 206:	00 c0       	rjmp	.+0      	; 0x208 <lcd_wr_command+0x44>
 208:	00 00       	nop
 20a:	42 98       	cbi	0x08, 2	; 8
 20c:	08 95       	ret

0000020e <lcd_init>:
 20e:	97 df       	rcall	.-210    	; 0x13e <lcd_set_4bit>
 210:	86 e6       	ldi	r24, 0x66	; 102
 212:	9e e0       	ldi	r25, 0x0E	; 14
 214:	01 97       	sbiw	r24, 0x01	; 1
 216:	f1 f7       	brne	.-4      	; 0x214 <lcd_init+0x6>
 218:	00 00       	nop
 21a:	88 e2       	ldi	r24, 0x28	; 40
 21c:	d3 df       	rcall	.-90     	; 0x1c4 <lcd_wr_command>
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	d1 df       	rcall	.-94     	; 0x1c4 <lcd_wr_command>
 222:	86 e0       	ldi	r24, 0x06	; 6
 224:	cf df       	rcall	.-98     	; 0x1c4 <lcd_wr_command>
 226:	8e e0       	ldi	r24, 0x0E	; 14
 228:	cd df       	rcall	.-102    	; 0x1c4 <lcd_wr_command>
 22a:	80 e8       	ldi	r24, 0x80	; 128
 22c:	cb cf       	rjmp	.-106    	; 0x1c4 <lcd_wr_command>
 22e:	08 95       	ret

00000230 <lcd_home>:
 230:	80 e8       	ldi	r24, 0x80	; 128
 232:	c8 cf       	rjmp	.-112    	; 0x1c4 <lcd_wr_command>
 234:	08 95       	ret

00000236 <lcd_cursor>:
 236:	82 30       	cpi	r24, 0x02	; 2
 238:	69 f0       	breq	.+26     	; 0x254 <lcd_cursor+0x1e>
 23a:	18 f4       	brcc	.+6      	; 0x242 <lcd_cursor+0xc>
 23c:	81 30       	cpi	r24, 0x01	; 1
 23e:	31 f0       	breq	.+12     	; 0x24c <lcd_cursor+0x16>
 240:	08 95       	ret
 242:	83 30       	cpi	r24, 0x03	; 3
 244:	59 f0       	breq	.+22     	; 0x25c <lcd_cursor+0x26>
 246:	84 30       	cpi	r24, 0x04	; 4
 248:	69 f0       	breq	.+26     	; 0x264 <lcd_cursor+0x2e>
 24a:	08 95       	ret
 24c:	8f e7       	ldi	r24, 0x7F	; 127
 24e:	86 0f       	add	r24, r22
 250:	b9 cf       	rjmp	.-142    	; 0x1c4 <lcd_wr_command>
 252:	08 95       	ret
 254:	8f eb       	ldi	r24, 0xBF	; 191
 256:	86 0f       	add	r24, r22
 258:	b5 cf       	rjmp	.-150    	; 0x1c4 <lcd_wr_command>
 25a:	08 95       	ret
 25c:	83 e9       	ldi	r24, 0x93	; 147
 25e:	86 0f       	add	r24, r22
 260:	b1 cf       	rjmp	.-158    	; 0x1c4 <lcd_wr_command>
 262:	08 95       	ret
 264:	83 ed       	ldi	r24, 0xD3	; 211
 266:	86 0f       	add	r24, r22
 268:	ad cf       	rjmp	.-166    	; 0x1c4 <lcd_wr_command>
 26a:	08 95       	ret

0000026c <lcd_wr_char>:
 * Output: None
 * Logic: This function prints an alpha-numeric character at specified (row, column) position on LCD
 * Example Call: lcd_wr_char(1, 4, 'A') => to write character 'A' to the LCD
 */
void lcd_wr_char(char row, char column, char alpha_num_char)
{
 26c:	cf 93       	push	r28
 26e:	c4 2f       	mov	r28, r20
	lcd_cursor (row, column);
 270:	e2 df       	rcall	.-60     	; 0x236 <lcd_cursor>
	
	char temp;
	
	temp = alpha_num_char;
	temp = (temp & 0xF0);
	lcd_data_port_reg &= 0x0F;
 272:	88 b1       	in	r24, 0x08	; 8
 274:	8f 70       	andi	r24, 0x0F	; 15
 276:	88 b9       	out	0x08, r24	; 8
	lcd_data_port_reg |= temp;
 278:	88 b1       	in	r24, 0x08	; 8
 27a:	9c 2f       	mov	r25, r28
 27c:	90 7f       	andi	r25, 0xF0	; 240
 27e:	89 2b       	or	r24, r25
 280:	88 b9       	out	0x08, r24	; 8
	
	sbit( lcd_control_port_reg, RS_pin );				// RS = 0 --- Data Input
 282:	40 9a       	sbi	0x08, 0	; 8
	cbit( lcd_control_port_reg, RW_pin );				// RW = 0 --- Writing to LCD
 284:	41 98       	cbi	0x08, 1	; 8
	sbit( lcd_control_port_reg, EN_pin );				// Set Enable Pin
 286:	42 9a       	sbi	0x08, 2	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 288:	8f ef       	ldi	r24, 0xFF	; 255
 28a:	97 e4       	ldi	r25, 0x47	; 71
 28c:	01 97       	sbiw	r24, 0x01	; 1
 28e:	f1 f7       	brne	.-4      	; 0x28c <lcd_wr_char+0x20>
 290:	00 c0       	rjmp	.+0      	; 0x292 <lcd_wr_char+0x26>
 292:	00 00       	nop
	_delay_ms(5);										// Delay
	cbit( lcd_control_port_reg, EN_pin );				// Clear Enable Pin
 294:	42 98       	cbi	0x08, 2	; 8
	
	alpha_num_char = (alpha_num_char & 0x0F);
	alpha_num_char = (alpha_num_char << 4);
	lcd_data_port_reg &= 0x0F;
 296:	88 b1       	in	r24, 0x08	; 8
 298:	8f 70       	andi	r24, 0x0F	; 15
 29a:	88 b9       	out	0x08, r24	; 8
	lcd_data_port_reg |= alpha_num_char;
 29c:	88 b1       	in	r24, 0x08	; 8
 29e:	c2 95       	swap	r28
 2a0:	c0 7f       	andi	r28, 0xF0	; 240
 2a2:	c8 2b       	or	r28, r24
 2a4:	c8 b9       	out	0x08, r28	; 8
	
	sbit( lcd_control_port_reg, RS_pin );				// RS = 0 --- Data Input
 2a6:	40 9a       	sbi	0x08, 0	; 8
	cbit( lcd_control_port_reg, RW_pin );				// RW = 0 --- Writing to LCD
 2a8:	41 98       	cbi	0x08, 1	; 8
	sbit( lcd_control_port_reg, EN_pin );				// Set Enable Pin
 2aa:	42 9a       	sbi	0x08, 2	; 8
 2ac:	8f ef       	ldi	r24, 0xFF	; 255
 2ae:	97 e4       	ldi	r25, 0x47	; 71
 2b0:	01 97       	sbiw	r24, 0x01	; 1
 2b2:	f1 f7       	brne	.-4      	; 0x2b0 <lcd_wr_char+0x44>
 2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <lcd_wr_char+0x4a>
 2b6:	00 00       	nop
	_delay_ms(5);										// Delay
	cbit( lcd_control_port_reg, EN_pin );				// Clear Enable Pin
 2b8:	42 98       	cbi	0x08, 2	; 8
}
 2ba:	cf 91       	pop	r28
 2bc:	08 95       	ret

000002be <lcd_string>:
 * Output: This function prints the given string on the LCD at the specified (row, column) position
 * Logic: Positions the cursor and prints each character on LCD in a while loop until EOF is reached
 * Example Call: lcd_string(1, 1, "Hello !");
 */
void lcd_string(char row, char column, char *str)
{
 2be:	0f 93       	push	r16
 2c0:	1f 93       	push	r17
 2c2:	cf 93       	push	r28
 2c4:	df 93       	push	r29
 2c6:	d8 2f       	mov	r29, r24
 2c8:	c6 2f       	mov	r28, r22
 2ca:	fa 01       	movw	r30, r20
	while(*str != '\0')
 2cc:	40 81       	ld	r20, Z
 2ce:	44 23       	and	r20, r20
 2d0:	61 f0       	breq	.+24     	; 0x2ea <lcd_string+0x2c>
 2d2:	8f 01       	movw	r16, r30
 2d4:	0f 5f       	subi	r16, 0xFF	; 255
 2d6:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		lcd_wr_char(row, column, *str);
 2d8:	6c 2f       	mov	r22, r28
 2da:	8d 2f       	mov	r24, r29
 2dc:	c7 df       	rcall	.-114    	; 0x26c <lcd_wr_char>
		str++;
		column+=1;
 2de:	cf 5f       	subi	r28, 0xFF	; 255
 * Logic: Positions the cursor and prints each character on LCD in a while loop until EOF is reached
 * Example Call: lcd_string(1, 1, "Hello !");
 */
void lcd_string(char row, char column, char *str)
{
	while(*str != '\0')
 2e0:	f8 01       	movw	r30, r16
 2e2:	41 91       	ld	r20, Z+
 2e4:	8f 01       	movw	r16, r30
 2e6:	41 11       	cpse	r20, r1
 2e8:	f7 cf       	rjmp	.-18     	; 0x2d8 <lcd_string+0x1a>
	{
		lcd_wr_char(row, column, *str);
		str++;
		column+=1;
	}
}
 2ea:	df 91       	pop	r29
 2ec:	cf 91       	pop	r28
 2ee:	1f 91       	pop	r17
 2f0:	0f 91       	pop	r16
 2f2:	08 95       	ret

000002f4 <lcd_numeric_value>:
 * Output: This function prints any integer value or value in a variable as integer
  *        on the specified location and up to the specified number of digits on LCD
 * Example Call: lcd_numeric_value(1, 1, -20, 2);
 */
void lcd_numeric_value(char row, char column, int val, int digits)
{
 2f4:	ef 92       	push	r14
 2f6:	ff 92       	push	r15
 2f8:	0f 93       	push	r16
 2fa:	1f 93       	push	r17
 2fc:	cf 93       	push	r28
 2fe:	df 93       	push	r29
 300:	d8 2f       	mov	r29, r24
 302:	c6 2f       	mov	r28, r22
 304:	7a 01       	movw	r14, r20
 306:	89 01       	movw	r16, r18
	lcd_cursor(row, column);
 308:	96 df       	rcall	.-212    	; 0x236 <lcd_cursor>
	
	if (val < 0)
 30a:	ff 20       	and	r15, r15
 30c:	4c f4       	brge	.+18     	; 0x320 <lcd_numeric_value+0x2c>
	{
		val = 0 - val;
 30e:	f1 94       	neg	r15
 310:	e1 94       	neg	r14
 312:	f1 08       	sbc	r15, r1
		lcd_string(row, column, "-");
 314:	40 e0       	ldi	r20, 0x00	; 0
 316:	52 e0       	ldi	r21, 0x02	; 2
 318:	6c 2f       	mov	r22, r28
 31a:	8d 2f       	mov	r24, r29
 31c:	d0 df       	rcall	.-96     	; 0x2be <lcd_string>
		column+=1;
 31e:	cf 5f       	subi	r28, 0xFF	; 255
	}
		
	unsigned char flag = 0;
	
	if(row == 0 || column == 0)
 320:	dd 23       	and	r29, r29
 322:	11 f0       	breq	.+4      	; 0x328 <lcd_numeric_value+0x34>
 324:	c1 11       	cpse	r28, r1
	{
		lcd_home();
 326:	02 c0       	rjmp	.+4      	; 0x32c <lcd_numeric_value+0x38>
 328:	83 df       	rcall	.-250    	; 0x230 <lcd_home>
	}
	
	else
	{
		lcd_cursor(row, column);
 32a:	03 c0       	rjmp	.+6      	; 0x332 <lcd_numeric_value+0x3e>
 32c:	6c 2f       	mov	r22, r28
 32e:	8d 2f       	mov	r24, r29
 330:	82 df       	rcall	.-252    	; 0x236 <lcd_cursor>
	}
	
	if(digits == 5 || flag == 1)
 332:	05 30       	cpi	r16, 0x05	; 5
 334:	11 05       	cpc	r17, r1
 336:	09 f0       	breq	.+2      	; 0x33a <lcd_numeric_value+0x46>
	{
		million = val/10000+48;
 338:	ad c0       	rjmp	.+346    	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 33a:	c7 01       	movw	r24, r14
 33c:	60 e1       	ldi	r22, 0x10	; 16
 33e:	77 e2       	ldi	r23, 0x27	; 39
 340:	88 d1       	rcall	.+784    	; 0x652 <__divmodhi4>
 342:	ab 01       	movw	r20, r22
 344:	40 5d       	subi	r20, 0xD0	; 208
 346:	5f 4f       	sbci	r21, 0xFF	; 255
 348:	50 93 03 02 	sts	0x0203, r21	; 0x800203 <__data_end+0x1>
 34c:	40 93 02 02 	sts	0x0202, r20	; 0x800202 <__data_end>
		lcd_wr_char(row ,column, million);
 350:	6c 2f       	mov	r22, r28
 352:	8d 2f       	mov	r24, r29
		column+=1;
 354:	8b df       	rcall	.-234    	; 0x26c <lcd_wr_char>
		flag = 1;
	}
	
	if(digits == 4 || flag == 1)
	{
		temp = val/1000;
 356:	cf 5f       	subi	r28, 0xFF	; 255
 358:	c7 01       	movw	r24, r14
 35a:	68 ee       	ldi	r22, 0xE8	; 232
 35c:	73 e0       	ldi	r23, 0x03	; 3
 35e:	79 d1       	rcall	.+754    	; 0x652 <__divmodhi4>
 360:	ab 01       	movw	r20, r22
 362:	70 93 05 02 	sts	0x0205, r23	; 0x800205 <temp+0x1>
 366:	60 93 04 02 	sts	0x0204, r22	; 0x800204 <temp>
		thousand = temp%10 + 48;
 36a:	9b 01       	movw	r18, r22
 36c:	ad ec       	ldi	r26, 0xCD	; 205
 36e:	bc ec       	ldi	r27, 0xCC	; 204
 370:	83 d1       	rcall	.+774    	; 0x678 <__umulhisi3>
 372:	96 95       	lsr	r25
 374:	87 95       	ror	r24
 376:	96 95       	lsr	r25
 378:	87 95       	ror	r24
 37a:	96 95       	lsr	r25
 37c:	87 95       	ror	r24
 37e:	9c 01       	movw	r18, r24
 380:	22 0f       	add	r18, r18
 382:	33 1f       	adc	r19, r19
 384:	88 0f       	add	r24, r24
 386:	99 1f       	adc	r25, r25
 388:	88 0f       	add	r24, r24
 38a:	99 1f       	adc	r25, r25
 38c:	88 0f       	add	r24, r24
 38e:	99 1f       	adc	r25, r25
 390:	82 0f       	add	r24, r18
 392:	93 1f       	adc	r25, r19
 394:	48 1b       	sub	r20, r24
 396:	59 0b       	sbc	r21, r25
 398:	40 5d       	subi	r20, 0xD0	; 208
 39a:	5f 4f       	sbci	r21, 0xFF	; 255
 39c:	50 93 0d 02 	sts	0x020D, r21	; 0x80020d <thousand+0x1>
 3a0:	40 93 0c 02 	sts	0x020C, r20	; 0x80020c <thousand>
		lcd_wr_char(row, column, thousand);
 3a4:	6c 2f       	mov	r22, r28
 3a6:	8d 2f       	mov	r24, r29
		column+=1;
 3a8:	61 df       	rcall	.-318    	; 0x26c <lcd_wr_char>
 3aa:	cf 5f       	subi	r28, 0xFF	; 255
		flag = 1;
	}
	
	if(digits == 3 || flag == 1)
 3ac:	03 c0       	rjmp	.+6      	; 0x3b4 <lcd_numeric_value+0xc0>
 3ae:	03 30       	cpi	r16, 0x03	; 3
 3b0:	11 05       	cpc	r17, r1
	{
		temp = val/100;
 3b2:	59 f5       	brne	.+86     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 3b4:	c7 01       	movw	r24, r14
 3b6:	64 e6       	ldi	r22, 0x64	; 100
 3b8:	70 e0       	ldi	r23, 0x00	; 0
 3ba:	4b d1       	rcall	.+662    	; 0x652 <__divmodhi4>
 3bc:	ab 01       	movw	r20, r22
 3be:	70 93 05 02 	sts	0x0205, r23	; 0x800205 <temp+0x1>
 3c2:	60 93 04 02 	sts	0x0204, r22	; 0x800204 <temp>
		hundred = temp%10 + 48;
 3c6:	9b 01       	movw	r18, r22
 3c8:	ad ec       	ldi	r26, 0xCD	; 205
 3ca:	bc ec       	ldi	r27, 0xCC	; 204
 3cc:	55 d1       	rcall	.+682    	; 0x678 <__umulhisi3>
 3ce:	96 95       	lsr	r25
 3d0:	87 95       	ror	r24
 3d2:	96 95       	lsr	r25
 3d4:	87 95       	ror	r24
 3d6:	96 95       	lsr	r25
 3d8:	87 95       	ror	r24
 3da:	9c 01       	movw	r18, r24
 3dc:	22 0f       	add	r18, r18
 3de:	33 1f       	adc	r19, r19
 3e0:	88 0f       	add	r24, r24
 3e2:	99 1f       	adc	r25, r25
 3e4:	88 0f       	add	r24, r24
 3e6:	99 1f       	adc	r25, r25
 3e8:	88 0f       	add	r24, r24
 3ea:	99 1f       	adc	r25, r25
 3ec:	82 0f       	add	r24, r18
 3ee:	93 1f       	adc	r25, r19
 3f0:	48 1b       	sub	r20, r24
 3f2:	59 0b       	sbc	r21, r25
 3f4:	40 5d       	subi	r20, 0xD0	; 208
 3f6:	5f 4f       	sbci	r21, 0xFF	; 255
 3f8:	50 93 09 02 	sts	0x0209, r21	; 0x800209 <hundred+0x1>
 3fc:	40 93 08 02 	sts	0x0208, r20	; 0x800208 <hundred>
		lcd_wr_char(row, column, hundred);
 400:	6c 2f       	mov	r22, r28
 402:	8d 2f       	mov	r24, r29
		column+=1;
 404:	33 df       	rcall	.-410    	; 0x26c <lcd_wr_char>
 406:	cf 5f       	subi	r28, 0xFF	; 255
		flag = 1;
	}
	
	if(digits == 2 || flag == 1)
 408:	04 c0       	rjmp	.+8      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 40a:	02 30       	cpi	r16, 0x02	; 2
 40c:	11 05       	cpc	r17, r1
 40e:	09 f0       	breq	.+2      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
	{
		temp = val/10;
 410:	46 c0       	rjmp	.+140    	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 412:	c7 01       	movw	r24, r14
 414:	6a e0       	ldi	r22, 0x0A	; 10
 416:	70 e0       	ldi	r23, 0x00	; 0
 418:	1c d1       	rcall	.+568    	; 0x652 <__divmodhi4>
 41a:	ab 01       	movw	r20, r22
 41c:	70 93 05 02 	sts	0x0205, r23	; 0x800205 <temp+0x1>
 420:	60 93 04 02 	sts	0x0204, r22	; 0x800204 <temp>
		tens = temp%10 + 48;
 424:	9b 01       	movw	r18, r22
 426:	ad ec       	ldi	r26, 0xCD	; 205
 428:	bc ec       	ldi	r27, 0xCC	; 204
 42a:	26 d1       	rcall	.+588    	; 0x678 <__umulhisi3>
 42c:	96 95       	lsr	r25
 42e:	87 95       	ror	r24
 430:	96 95       	lsr	r25
 432:	87 95       	ror	r24
 434:	96 95       	lsr	r25
 436:	87 95       	ror	r24
 438:	9c 01       	movw	r18, r24
 43a:	22 0f       	add	r18, r18
 43c:	33 1f       	adc	r19, r19
 43e:	88 0f       	add	r24, r24
 440:	99 1f       	adc	r25, r25
 442:	88 0f       	add	r24, r24
 444:	99 1f       	adc	r25, r25
 446:	88 0f       	add	r24, r24
 448:	99 1f       	adc	r25, r25
 44a:	82 0f       	add	r24, r18
 44c:	93 1f       	adc	r25, r19
 44e:	48 1b       	sub	r20, r24
 450:	59 0b       	sbc	r21, r25
 452:	40 5d       	subi	r20, 0xD0	; 208
 454:	5f 4f       	sbci	r21, 0xFF	; 255
 456:	50 93 07 02 	sts	0x0207, r21	; 0x800207 <tens+0x1>
		lcd_wr_char(row, column, tens);
 45a:	40 93 06 02 	sts	0x0206, r20	; 0x800206 <tens>
 45e:	6c 2f       	mov	r22, r28
		column+=1;
 460:	8d 2f       	mov	r24, r29
		flag = 1;
	}
	
	if(digits == 1 || flag == 1)
	{
		unit = val%10 + 48;
 462:	04 df       	rcall	.-504    	; 0x26c <lcd_wr_char>
 464:	cf 5f       	subi	r28, 0xFF	; 255
 466:	c7 01       	movw	r24, r14
 468:	6a e0       	ldi	r22, 0x0A	; 10
 46a:	70 e0       	ldi	r23, 0x00	; 0
 46c:	f2 d0       	rcall	.+484    	; 0x652 <__divmodhi4>
 46e:	ac 01       	movw	r20, r24
 470:	40 5d       	subi	r20, 0xD0	; 208
 472:	5f 4f       	sbci	r21, 0xFF	; 255
 474:	50 93 0b 02 	sts	0x020B, r21	; 0x80020b <unit+0x1>
		lcd_wr_char(row, column, unit);
 478:	40 93 0a 02 	sts	0x020A, r20	; 0x80020a <unit>
 47c:	6c 2f       	mov	r22, r28
 47e:	8d 2f       	mov	r24, r29
		column+=1;
 480:	f5 de       	rcall	.-534    	; 0x26c <lcd_wr_char>
	}
	
	if(digits > 5)
 482:	cf 5f       	subi	r28, 0xFF	; 255
 484:	06 30       	cpi	r16, 0x06	; 6
 486:	11 05       	cpc	r17, r1
	{
		lcd_wr_char(row, column, 'E');
 488:	74 f0       	brlt	.+28     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 48a:	45 e4       	ldi	r20, 0x45	; 69
 48c:	6c 2f       	mov	r22, r28
 48e:	8d 2f       	mov	r24, r29
 490:	ed de       	rcall	.-550    	; 0x26c <lcd_wr_char>
		column+=1;
	}
 492:	09 c0       	rjmp	.+18     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
		lcd_wr_char(row ,column, million);
		column+=1;
		flag = 1;
	}
	
	if(digits == 4 || flag == 1)
 494:	04 30       	cpi	r16, 0x04	; 4
 496:	11 05       	cpc	r17, r1
 498:	09 f0       	breq	.+2      	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
 49a:	89 cf       	rjmp	.-238    	; 0x3ae <lcd_numeric_value+0xba>
 49c:	5d cf       	rjmp	.-326    	; 0x358 <lcd_numeric_value+0x64>
		lcd_wr_char(row, column, tens);
		column+=1;
		flag = 1;
	}
	
	if(digits == 1 || flag == 1)
 49e:	01 30       	cpi	r16, 0x01	; 1
 4a0:	11 05       	cpc	r17, r1
 4a2:	81 f7       	brne	.-32     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 4a4:	e0 cf       	rjmp	.-64     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
	if(digits > 5)
	{
		lcd_wr_char(row, column, 'E');
		column+=1;
	}
 4a6:	df 91       	pop	r29
 4a8:	cf 91       	pop	r28
 4aa:	1f 91       	pop	r17
 4ac:	0f 91       	pop	r16
 4ae:	ff 90       	pop	r15
 4b0:	ef 90       	pop	r14
 4b2:	08 95       	ret

000004b4 <wl_sensors_port_config>:

	unsigned char adc_8bit_data;
	// read the appropriate ADC data register/s
	adc_8bit_data = ADCH_reg;
	return adc_8bit_data;
}
 4b4:	80 b3       	in	r24, 0x10	; 16
 4b6:	81 7f       	andi	r24, 0xF1	; 241
 4b8:	80 bb       	out	0x10, r24	; 16
 4ba:	81 b3       	in	r24, 0x11	; 17
 4bc:	81 7f       	andi	r24, 0xF1	; 241
 4be:	81 bb       	out	0x11, r24	; 17
 4c0:	08 95       	ret

000004c2 <ir_prox_sensors_port_config>:
 4c2:	80 b3       	in	r24, 0x10	; 16
 4c4:	8f 73       	andi	r24, 0x3F	; 63
 4c6:	80 bb       	out	0x10, r24	; 16
 4c8:	81 b3       	in	r24, 0x11	; 17
 4ca:	8f 73       	andi	r24, 0x3F	; 63
 4cc:	81 bb       	out	0x11, r24	; 17
 4ce:	e7 e0       	ldi	r30, 0x07	; 7
 4d0:	f1 e0       	ldi	r31, 0x01	; 1
 4d2:	80 81       	ld	r24, Z
 4d4:	8e 7f       	andi	r24, 0xFE	; 254
 4d6:	80 83       	st	Z, r24
 4d8:	e8 e0       	ldi	r30, 0x08	; 8
 4da:	f1 e0       	ldi	r31, 0x01	; 1
 4dc:	80 81       	ld	r24, Z
 4de:	8e 7f       	andi	r24, 0xFE	; 254
 4e0:	80 83       	st	Z, r24
 4e2:	08 95       	ret

000004e4 <adc_init>:
 4e4:	ea e7       	ldi	r30, 0x7A	; 122
 4e6:	f0 e0       	ldi	r31, 0x00	; 0
 4e8:	80 81       	ld	r24, Z
 4ea:	86 68       	ori	r24, 0x86	; 134
 4ec:	80 83       	st	Z, r24
 4ee:	80 81       	ld	r24, Z
 4f0:	87 78       	andi	r24, 0x87	; 135
 4f2:	80 83       	st	Z, r24
 4f4:	eb e7       	ldi	r30, 0x7B	; 123
 4f6:	f0 e0       	ldi	r31, 0x00	; 0
 4f8:	80 81       	ld	r24, Z
 4fa:	80 7b       	andi	r24, 0xB0	; 176
 4fc:	80 83       	st	Z, r24
 4fe:	ec e7       	ldi	r30, 0x7C	; 124
 500:	f0 e0       	ldi	r31, 0x00	; 0
 502:	80 81       	ld	r24, Z
 504:	80 64       	ori	r24, 0x40	; 64
 506:	80 83       	st	Z, r24
 508:	80 81       	ld	r24, Z
 50a:	80 7e       	andi	r24, 0xE0	; 224
 50c:	80 83       	st	Z, r24
 50e:	80 81       	ld	r24, Z
 510:	80 62       	ori	r24, 0x20	; 32
 512:	80 83       	st	Z, r24
 514:	80 b7       	in	r24, 0x30	; 48
 516:	80 68       	ori	r24, 0x80	; 128
 518:	80 bf       	out	0x30, r24	; 48
 51a:	08 95       	ret

0000051c <select_adc_channel>:
 51c:	88 30       	cpi	r24, 0x08	; 8
 51e:	70 f4       	brcc	.+28     	; 0x53c <select_adc_channel+0x20>
 520:	ea e7       	ldi	r30, 0x7A	; 122
 522:	f0 e0       	ldi	r31, 0x00	; 0
 524:	90 81       	ld	r25, Z
 526:	97 7f       	andi	r25, 0xF7	; 247
 528:	90 83       	st	Z, r25
 52a:	ec e7       	ldi	r30, 0x7C	; 124
 52c:	f0 e0       	ldi	r31, 0x00	; 0
 52e:	90 81       	ld	r25, Z
 530:	97 70       	andi	r25, 0x07	; 7
 532:	90 83       	st	Z, r25
 534:	90 81       	ld	r25, Z
 536:	89 2b       	or	r24, r25
 538:	80 83       	st	Z, r24
 53a:	08 95       	ret
 53c:	98 ef       	ldi	r25, 0xF8	; 248
 53e:	98 0f       	add	r25, r24
 540:	99 30       	cpi	r25, 0x09	; 9
 542:	68 f4       	brcc	.+26     	; 0x55e <select_adc_channel+0x42>
 544:	ea e7       	ldi	r30, 0x7A	; 122
 546:	f0 e0       	ldi	r31, 0x00	; 0
 548:	90 81       	ld	r25, Z
 54a:	98 60       	ori	r25, 0x08	; 8
 54c:	90 83       	st	Z, r25
 54e:	ec e7       	ldi	r30, 0x7C	; 124
 550:	f0 e0       	ldi	r31, 0x00	; 0
 552:	90 81       	ld	r25, Z
 554:	97 70       	andi	r25, 0x07	; 7
 556:	90 83       	st	Z, r25
 558:	90 81       	ld	r25, Z
 55a:	89 2b       	or	r24, r25
 55c:	80 83       	st	Z, r24
 55e:	08 95       	ret

00000560 <start_adc>:
 560:	ea e7       	ldi	r30, 0x7A	; 122
 562:	f0 e0       	ldi	r31, 0x00	; 0
 564:	80 81       	ld	r24, Z
 566:	80 64       	ori	r24, 0x40	; 64
 568:	80 83       	st	Z, r24
 56a:	08 95       	ret

0000056c <check_adc_conversion_complete>:
 56c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
 570:	82 95       	swap	r24
 572:	81 70       	andi	r24, 0x01	; 1
 574:	08 95       	ret

00000576 <reset_adc_config_registers>:
* @brief Reset ADC config registers, ADCSRA, ADCSRB and ADMUX
*/
void reset_adc_config_registers(void){
	// << NOTE >> : Use Masking and Shift Operators here

	ADMUX_reg = 0x00;
 576:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	ADCSRB_reg = 0x00;
 57a:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
	ADCSRA_reg = 0x00;
 57e:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x70007a>
 582:	08 95       	ret

00000584 <convert_analog_channel_data>:
*
* @param[in] sensor_channel_number ADC channel number of sensor
*
* @return 8-bit digital data from the input sensor ADC channel
*/
unsigned char convert_analog_channel_data( unsigned char sensor_channel_number ){
 584:	cf 93       	push	r28

	// << NOTE >> : You are not allowed to modify or change anything inside this function

	unsigned char adc_8bit_data;

	select_adc_channel( sensor_channel_number );
 586:	ca df       	rcall	.-108    	; 0x51c <select_adc_channel>

	start_adc();
 588:	eb df       	rcall	.-42     	; 0x560 <start_adc>

	while( !( check_adc_conversion_complete() ) );
 58a:	f0 df       	rcall	.-32     	; 0x56c <check_adc_conversion_complete>
 58c:	88 23       	and	r24, r24
 58e:	e9 f3       	breq	.-6      	; 0x58a <convert_analog_channel_data+0x6>
unsigned char read_adc_converted_data(void){
	// << NOTE >> : Use Masking and Shift Operators here

	unsigned char adc_8bit_data;
	// read the appropriate ADC data register/s
	adc_8bit_data = ADCH_reg;
 590:	c0 91 79 00 	lds	r28, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>

	while( !( check_adc_conversion_complete() ) );

	adc_8bit_data = read_adc_converted_data();

	reset_adc_config_registers();
 594:	f0 df       	rcall	.-32     	; 0x576 <reset_adc_config_registers>
 596:	8c 2f       	mov	r24, r28

	return adc_8bit_data;
}
 598:	cf 91       	pop	r28
 59a:	08 95       	ret

0000059c <main>:
 59c:	8b df       	rcall	.-234    	; 0x4b4 <wl_sensors_port_config>
int main(void) {

	// << NOTE >> : You are not allowed to modify or change anything inside this function except a part of while loop

	wl_sensors_port_config(); // Initialize the three white line sensors
	ir_prox_sensors_port_config(); // Initialize the 3rd, 4th and 5th IR proximity sensors
 59e:	91 df       	rcall	.-222    	; 0x4c2 <ir_prox_sensors_port_config>

	adc_init(); // Initialize the ADC
 5a0:	a1 df       	rcall	.-190    	; 0x4e4 <adc_init>

	lcd_port_config(); // Initialize the LCD port
 5a2:	c0 dd       	rcall	.-1152   	; 0x124 <lcd_port_config>
	lcd_init(); // Initialize the LCD
 5a4:	34 de       	rcall	.-920    	; 0x20e <lcd_init>

	uart_init(UBRR_VALUE); // Initialize the UART
 5a6:	8f e5       	ldi	r24, 0x5F	; 95
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	3d d0       	rcall	.+122    	; 0x626 <uart_init>
	{
		// ------------------------------- //

		// get the ADC converted data of the sensors from the appropriate channel number

		left_wl_sensor_data = convert_analog_channel_data(3);
 5ac:	83 e0       	ldi	r24, 0x03	; 3
 5ae:	ea df       	rcall	.-44     	; 0x584 <convert_analog_channel_data>
 5b0:	e8 2e       	mov	r14, r24
		center_wl_sensor_data = convert_analog_channel_data(2);
 5b2:	82 e0       	ldi	r24, 0x02	; 2
 5b4:	e7 df       	rcall	.-50     	; 0x584 <convert_analog_channel_data>
 5b6:	f8 2e       	mov	r15, r24
		right_wl_sensor_data = convert_analog_channel_data(1);
 5b8:	81 e0       	ldi	r24, 0x01	; 1
 5ba:	e4 df       	rcall	.-56     	; 0x584 <convert_analog_channel_data>
 5bc:	08 2f       	mov	r16, r24

		ir_prox_3_sensor_data = convert_analog_channel_data(6);
 5be:	86 e0       	ldi	r24, 0x06	; 6
 5c0:	e1 df       	rcall	.-62     	; 0x584 <convert_analog_channel_data>
 5c2:	18 2f       	mov	r17, r24
 5c4:	87 e0       	ldi	r24, 0x07	; 7
		ir_prox_4_sensor_data = convert_analog_channel_data(7);
 5c6:	de df       	rcall	.-68     	; 0x584 <convert_analog_channel_data>
 5c8:	d8 2f       	mov	r29, r24
 5ca:	88 e0       	ldi	r24, 0x08	; 8
		ir_prox_5_sensor_data = convert_analog_channel_data(8);
 5cc:	db df       	rcall	.-74     	; 0x584 <convert_analog_channel_data>
 5ce:	c8 2f       	mov	r28, r24
 5d0:	4e 2d       	mov	r20, r14
 5d2:	50 e0       	ldi	r21, 0x00	; 0

		// ------------------------------- //

		lcd_numeric_value(1, 1, left_wl_sensor_data, 3);
 5d4:	23 e0       	ldi	r18, 0x03	; 3
 5d6:	30 e0       	ldi	r19, 0x00	; 0
 5d8:	61 e0       	ldi	r22, 0x01	; 1
 5da:	81 e0       	ldi	r24, 0x01	; 1
 5dc:	8b de       	rcall	.-746    	; 0x2f4 <lcd_numeric_value>
 5de:	4f 2d       	mov	r20, r15
 5e0:	50 e0       	ldi	r21, 0x00	; 0
		lcd_numeric_value(1, 5, center_wl_sensor_data, 3);
 5e2:	23 e0       	ldi	r18, 0x03	; 3
 5e4:	30 e0       	ldi	r19, 0x00	; 0
 5e6:	65 e0       	ldi	r22, 0x05	; 5
 5e8:	81 e0       	ldi	r24, 0x01	; 1
 5ea:	84 de       	rcall	.-760    	; 0x2f4 <lcd_numeric_value>
 5ec:	40 2f       	mov	r20, r16
 5ee:	50 e0       	ldi	r21, 0x00	; 0
		lcd_numeric_value(1, 9, right_wl_sensor_data, 3);
 5f0:	23 e0       	ldi	r18, 0x03	; 3
 5f2:	30 e0       	ldi	r19, 0x00	; 0
 5f4:	69 e0       	ldi	r22, 0x09	; 9
 5f6:	81 e0       	ldi	r24, 0x01	; 1
 5f8:	7d de       	rcall	.-774    	; 0x2f4 <lcd_numeric_value>
 5fa:	41 2f       	mov	r20, r17
 5fc:	50 e0       	ldi	r21, 0x00	; 0

		lcd_numeric_value(2, 1, ir_prox_3_sensor_data, 3);
 5fe:	23 e0       	ldi	r18, 0x03	; 3
 600:	30 e0       	ldi	r19, 0x00	; 0
 602:	61 e0       	ldi	r22, 0x01	; 1
 604:	82 e0       	ldi	r24, 0x02	; 2
 606:	76 de       	rcall	.-788    	; 0x2f4 <lcd_numeric_value>
 608:	4d 2f       	mov	r20, r29
 60a:	50 e0       	ldi	r21, 0x00	; 0
		lcd_numeric_value(2, 5, ir_prox_4_sensor_data, 3);
 60c:	23 e0       	ldi	r18, 0x03	; 3
 60e:	30 e0       	ldi	r19, 0x00	; 0
 610:	65 e0       	ldi	r22, 0x05	; 5
 612:	82 e0       	ldi	r24, 0x02	; 2
 614:	6f de       	rcall	.-802    	; 0x2f4 <lcd_numeric_value>
 616:	4c 2f       	mov	r20, r28
 618:	50 e0       	ldi	r21, 0x00	; 0
 61a:	23 e0       	ldi	r18, 0x03	; 3
		lcd_numeric_value(2, 9, ir_prox_5_sensor_data, 3);
 61c:	30 e0       	ldi	r19, 0x00	; 0
 61e:	69 e0       	ldi	r22, 0x09	; 9
 620:	82 e0       	ldi	r24, 0x02	; 2
 622:	68 de       	rcall	.-816    	; 0x2f4 <lcd_numeric_value>
 624:	c3 cf       	rjmp	.-122    	; 0x5ac <main+0x10>

00000626 <uart_init>:
 * Example Call: uart_init();
 */
void uart_init (unsigned int ubbr_value)
{
	// In UCSRB_reg, disable all bits setting the Baud Rate
	UCSRB_reg	= 0x00;
 626:	e1 ed       	ldi	r30, 0xD1	; 209
 628:	f0 e0       	ldi	r31, 0x00	; 0
 62a:	10 82       	st	Z, r1
	
	// In UBRRH_reg and UBRRL_reg, set the baud rate
	UBRRH_reg	= (unsigned char) ( ubbr_value >> 8 );
 62c:	90 93 d5 00 	sts	0x00D5, r25	; 0x8000d5 <__TEXT_REGION_LENGTH__+0x7000d5>
	UBRRL_reg	= (unsigned char) ( ubbr_value );
 630:	80 93 d4 00 	sts	0x00D4, r24	; 0x8000d4 <__TEXT_REGION_LENGTH__+0x7000d4>
	
	// In UCSRC_reg, select the Asynchronous USART mode and the character size to 8 bits
	UCSRC_reg	&= ~( ( 1 << UMSEL1_bit ) | ( 1 << UMSEL0_bit ) );
 634:	a2 ed       	ldi	r26, 0xD2	; 210
 636:	b0 e0       	ldi	r27, 0x00	; 0
 638:	8c 91       	ld	r24, X
 63a:	8f 73       	andi	r24, 0x3F	; 63
 63c:	8c 93       	st	X, r24
	UCSRC_reg	|= ( ( 1 << UCSZ1_bit ) | ( 1 << UCSZ0_bit ) );
 63e:	8c 91       	ld	r24, X
 640:	86 60       	ori	r24, 0x06	; 6
 642:	8c 93       	st	X, r24
	
	// In UCSRB_reg, enable the receiver and transmitter
	UCSRB_reg	|= ( ( 1 << TXEN_bit ) | ( 1 << RXEN_bit ) );
 644:	80 81       	ld	r24, Z
 646:	88 61       	ori	r24, 0x18	; 24
 648:	80 83       	st	Z, r24
	UCSRB_reg	&= ~( 1 << UCSZ2_bit );
 64a:	80 81       	ld	r24, Z
 64c:	8b 7f       	andi	r24, 0xFB	; 251
 64e:	80 83       	st	Z, r24
 650:	08 95       	ret

00000652 <__divmodhi4>:
 652:	97 fb       	bst	r25, 7
 654:	07 2e       	mov	r0, r23
 656:	16 f4       	brtc	.+4      	; 0x65c <__divmodhi4+0xa>
 658:	00 94       	com	r0
 65a:	06 d0       	rcall	.+12     	; 0x668 <__divmodhi4_neg1>
 65c:	77 fd       	sbrc	r23, 7
 65e:	08 d0       	rcall	.+16     	; 0x670 <__divmodhi4_neg2>
 660:	1a d0       	rcall	.+52     	; 0x696 <__udivmodhi4>
 662:	07 fc       	sbrc	r0, 7
 664:	05 d0       	rcall	.+10     	; 0x670 <__divmodhi4_neg2>
 666:	3e f4       	brtc	.+14     	; 0x676 <__divmodhi4_exit>

00000668 <__divmodhi4_neg1>:
 668:	90 95       	com	r25
 66a:	81 95       	neg	r24
 66c:	9f 4f       	sbci	r25, 0xFF	; 255
 66e:	08 95       	ret

00000670 <__divmodhi4_neg2>:
 670:	70 95       	com	r23
 672:	61 95       	neg	r22
 674:	7f 4f       	sbci	r23, 0xFF	; 255

00000676 <__divmodhi4_exit>:
 676:	08 95       	ret

00000678 <__umulhisi3>:
 678:	a2 9f       	mul	r26, r18
 67a:	b0 01       	movw	r22, r0
 67c:	b3 9f       	mul	r27, r19
 67e:	c0 01       	movw	r24, r0
 680:	a3 9f       	mul	r26, r19
 682:	70 0d       	add	r23, r0
 684:	81 1d       	adc	r24, r1
 686:	11 24       	eor	r1, r1
 688:	91 1d       	adc	r25, r1
 68a:	b2 9f       	mul	r27, r18
 68c:	70 0d       	add	r23, r0
 68e:	81 1d       	adc	r24, r1
 690:	11 24       	eor	r1, r1
 692:	91 1d       	adc	r25, r1
 694:	08 95       	ret

00000696 <__udivmodhi4>:
 696:	aa 1b       	sub	r26, r26
 698:	bb 1b       	sub	r27, r27
 69a:	51 e1       	ldi	r21, 0x11	; 17
 69c:	07 c0       	rjmp	.+14     	; 0x6ac <__udivmodhi4_ep>

0000069e <__udivmodhi4_loop>:
 69e:	aa 1f       	adc	r26, r26
 6a0:	bb 1f       	adc	r27, r27
 6a2:	a6 17       	cp	r26, r22
 6a4:	b7 07       	cpc	r27, r23
 6a6:	10 f0       	brcs	.+4      	; 0x6ac <__udivmodhi4_ep>
 6a8:	a6 1b       	sub	r26, r22
 6aa:	b7 0b       	sbc	r27, r23

000006ac <__udivmodhi4_ep>:
 6ac:	88 1f       	adc	r24, r24
 6ae:	99 1f       	adc	r25, r25
 6b0:	5a 95       	dec	r21
 6b2:	a9 f7       	brne	.-22     	; 0x69e <__udivmodhi4_loop>
 6b4:	80 95       	com	r24
 6b6:	90 95       	com	r25
 6b8:	bc 01       	movw	r22, r24
 6ba:	cd 01       	movw	r24, r26
 6bc:	08 95       	ret

000006be <_exit>:
 6be:	f8 94       	cli

000006c0 <__stop_program>:
 6c0:	ff cf       	rjmp	.-2      	; 0x6c0 <__stop_program>
